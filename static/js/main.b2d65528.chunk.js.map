{"version":3,"sources":["components/Nav/index.js","components/Display/index.js","components/EmployeeList/index.js","components/Search/index.js","components/Employee/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Display","EmployeeList","props","scope","employees","map","user","key","login","uuid","name","first","last","email","location","city","country","Search","htmlFor","onChange","handleInputChange","value","search","Employee","event","target","console","log","filteredEmp","state","filter","toLowerCase","indexOf","setState","filtered","axios","get","then","res","data","results","catch","err","this","handleFormSubmit","length","Component","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b2d65528.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nfunction Nav() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"/\">Employee Directory</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n                <NavLink to=\"/\" className=\"nav-item nav-link\">Home</NavLink>\n                <NavLink to=\"/employees\" className=\"nav-item nav-link\">Directory</NavLink>\n            </ul>\n        </div>\n      </nav>\n    );\n}\n\n\nexport default Nav;","import React from 'react';\n\nfunction Display() {\n    return (\n      <div className=\"container\">\n        <h1>Welcome to the Employee Manager</h1>\n        <hr />\n        <h5>\n          Welcome the Employee Directory. Click on the Directory to view the employee roster. Filter your search for an employee by their last name.\n        </h5>\n      </div>\n    );\n}\n\nexport default Display;","import React from 'react';\n\n\nfunction EmployeeList(props) {\n\n  return (\n    <div className=\"employee-list\">\n      <table className=\"table table-striped table-dark\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">First</th>\n            <th scope=\"col\">Last</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">City</th>\n            <th scope=\"col\">Country</th>\n          </tr>\n        </thead>\n        <tbody>\n            {props.employees.map(user => (\n              <tr key={user.login.uuid}>\n                  <th scope=\"row\">#</th>\n                  <td>{user.name.first}</td>\n                  <td>{user.name.last}</td>\n                  <td>{user.email}</td>\n                  <td>{user.location.city}</td>\n                  <td>{user.location.country}</td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default EmployeeList;\n","import React from 'react';\n\n\nfunction Search(props) {\n    return (\n      <div className=\"form-search\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-3\">\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"search\">Search by Last Name:</label>\n                <input\n                  type=\"text\"\n                  name=\"search\"\n                  onChange={props.handleInputChange}\n                  value={props.search}\n                  className=\"form-control\"\n                />\n              </div>\n            </form>\n            <h4>Filter Results:</h4>\n\n          </div>\n        </div>\n\n        <br />\n      </div>\n    );\n}\n\n\nexport default Search;","import React, { Component } from 'react';\nimport EmployeeList from '../EmployeeList';\nimport Search from '../Search';\nimport axios from 'axios';\n\n\nclass Employee extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            search: '',\n            employees: [],\n            filtered: []\n        }\n    }\n\n    // When this component mounts, search the Placeholder API for User data\n    componentDidMount() {\n        let url = \"https://randomuser.me/api/?results=100\";\n        axios.get(url)\n            .then(res => {\n                // test to see what data we get back\n                // console.log(\"Data: \");\n                let data = res.data.results;\n                console.log(data);\n                // update state with User API data\n                this.setState({ employees: data, filtered: data })\n            }).catch(err => {\n                if(err) console.log(err);\n            })\n    }\n\n    handleInputChange = (event) => {\n        let name = event.target.name;\n        let value = event.target.value;\n        // ** Testing ** // Log returned values\n        console.log(name, value);\n\n        let filteredEmp = this.state.employees.filter(user => {\n        //   return user.name.last.indexOf(value.toLowerCase()) !== -1;\n          return user.name.last.toLowerCase().indexOf(value.toLowerCase()) === 0;\n        });\n\n        this.setState({\n          [name]: value,\n          filtered: filteredEmp\n        });\n    }\n\n\n    render() {\n        return (\n          <div className=\"container\">\n\n            <Search \n                search={this.state.search}\n                handleInputChange={this.handleInputChange}\n                handleFormSubmit={this.handleFormSubmit}\n            />\n            <hr />\n            <h3>Employee Roster:</h3>\n            <h5>Number: {this.state.filtered.length}</h5>\n            <hr />\n\n            <EmployeeList employees={this.state.filtered} />\n\n            { this.state.filtered.length > 0 ? \n            <EmployeeList employees={this.state.filtered} />\n            :\n            <EmployeeList employees={this.state.employees} />\n            }\n\n\n            {/* Conditional Rendering  */}\n            {/* { this.state.filtered.length > 0 ? \n            <EmployeeList employees={this.state.filtered} />\n            :\n            <EmployeeList employees={this.state.employees} />\n            } */}\n\n          </div>\n        );\n    }\n}\n\nexport default Employee;\n","import React from 'react';\nimport { HashRouter as Router, Route, Link, NavLink } from 'react-router-dom';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Display from './components/Display';\nimport Employee from './components/Employee';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Route exact path='/' component={Display} />\n      <Route exact path='/employees' component={Employee} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}